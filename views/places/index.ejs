<% layout("layouts/app") %>

    <h1>All Places</h1>
    <div id="mapContainer" class="mapContainer" style="width: 100%; height: 500px; margin-bottom: 5%;"></div>
    <% for(const place of places) { %>
        <div class="card mb-3">
            <div class="row">
                <div class="col-md-4">
                    <% if(place.images.length){ %>
                        <img src="/images/<%= place.images[0].filename %>" alt="<%= place.title %>" class="img-fluid">
                        <%} else { %>
                            <img src="https://images.unsplash.com/photo-1507525428034-b723cf961d3e?q=80&w=2073&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
                                alt="<%= place.title %>" <% } %>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <h5 class="card-title">
                            <%= place.title %>
                        </h5>
                        <p class="card-text">
                            <%= place.description %>
                        </p>
                        <p class="card-text">
                            <small class="text-secondary">
                                <%= place.location %>
                            </small>
                        </p>
                        <a href="/places/<%= place._id %>" class="btn btn-primary">View</a>
                    </div>
                </div>
            </div>
        </div>
        <% } %>

            <script>
                const clusteredPlace = <%- clusteredPlace %>
            </script>

            <script>
                function startClustering(map, data) {
                    // First we need to create an array of DataPoint objects,
                    // for the ClusterProvider
                    var dataPoints = data.map(function (item) {
                        return new H.clustering.DataPoint(item.latitude, item.longitude);
                    });

                    // Create a clustering provider with custom options for clusterizing the input
                    var clusteredDataProvider = new H.clustering.Provider(dataPoints, {
                        clusteringOptions: {
                            // Maximum radius of the neighbourhood
                            eps: 32,
                            // minimum weight of points required to form a cluster
                            minWeight: 2,
                        },
                    });

                    // Create a layer tha will consume objects from our clustering provider
                    var clusteringLayer = new H.map.layer.ObjectLayer(clusteredDataProvider);

                    // To make objects from clustering provder visible,
                    // we need to add our layer to the map
                    map.addLayer(clusteringLayer);
                }
                const platform = new H.service.Platform({
                    'apikey': 'cKKA1D0ftrVJs4QkN-6rCiVWIOiCgsvi3UEVAjhWqAs'
                });
                const defaultLayers = platform.createDefaultLayers();
                const map = new H.Map(
                    document.getElementById('mapContainer'),
                    defaultLayers.vector.normal.map,
                    {
                        zoom: 5,
                        center: { lat: -0.9730197, lng: 116.7034266 },
                        pixelRatio: window.devicePixelRatio || 1
                    });

                const ui = H.ui.UI.createDefault(map, defaultLayers, 'en-US');
                const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

                startClustering(map, clusteredPlace)
            </script>